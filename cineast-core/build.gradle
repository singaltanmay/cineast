plugins {
    id 'maven'
}

repositories {
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}


if (!project.hasProperty("build_version")) {
    ext.dbisNexusUsername = "no"
    ext.dbisNexusPassword = "no"
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "https://dbis-nexus.dmi.unibas.ch/repository/maven-snapshots/") {
                authentication(userName: "$dbisNexusUsername", password: "$dbisNexusPassword")
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.vitrivr'
            artifactId = 'cineast-core'
            version = System.getenv().getOrDefault("MAVEN_PUBLICATION_VERSION", version.toString())
            pom {
                name = 'Cineast (Driver)'
                description = 'The core library for Cineast.'
                url = 'https://github.com/vitrivr/cineast/'
                licenses {
                    license {
                        name = 'MIT License'
                    }
                }
                developers {
                    developer {
                        id = 'lucaro'
                        name = 'Luca Rossetto'
                        email = 'rossetto@ifi.uzh.ch'
                    }
                    developer {
                        id = 'silvanheller'
                        name = 'Silvan Heller'
                        email = 'silvan.heller@unibas.ch'
                    }
                    developer {
                        id = 'sauterl'
                        name = 'Loris Sauter'
                        email = 'loris.sauter@unibas.ch'
                    }
                    developer {
                        id = 'ppanopticon'
                        name = 'Ralph Gasser'
                        email = 'ralph.gasser@unibas.ch'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/vitrivr/cineast.git'
                    url = 'https://github.com/vitrivr/cineast/'
                }
            }
            from components.java
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            name = "OSSRH"
            url = (publishing.publications.mavenJava.version.endsWith('SNAPSHOT')) ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}


/**
 * We cannot switch to implementation yet in multi-module setups.
 * With Gradle 6.7 and MacOS, declaring dependencies as implementation means they do not get exposed to other projects
 */
dependencies {

    /** THE Cottontail DB proto dependency */
    implementation group: 'org.vitrivr', name: 'cottontaildb-proto', version: version_cottontaildb
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: version_kotlin_stdlib

    /** THE ADAMpro proto dependency (legacy) */
    implementation group: 'org.vitrivr', name: 'adampro-proto', version: version_adampro

    /* Google Json: GSON, since JSON db layer is based on this */
    implementation group: 'com.google.code.gson', name: 'gson', version: version_gson

    /** Some basic stuff (collections etc). */
    implementation group: "net.sf.trove4j", name: "trove4j", version: version_trove4j
    implementation group: "com.google.guava", name: "guava", version: version_guava
    implementation group: "com.googlecode.javaewah", name: "JavaEWAH", version: version_javaewah

    /** Lombok to generate getters and setters at runtime */
    def lombok_version = "1.18.20";
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testCompileOnly "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"

    /** Mockito for unit testing */
    implementation 'org.mockito:mockito-core:3.11.0'

    /** Tensorflow (Java). */
    implementation group: "org.tensorflow", name: "tensorflow-core-platform", version: version_tensorflow

    /** Apache Commons Libraries */
    implementation group: "org.apache.commons", name: "commons-lang3", version: version_commonslang3
    implementation group: "org.apache.commons", name: "commons-math3", version: version_commonsmath3
    implementation group: "commons-io", name: "commons-io", version: version_commonsio
    implementation group: "commons-codec", name: "commons-codec", version: version_commonscodec

    /** ImageIO and computer graphics libraries. */
    implementation group: "com.twelvemonkeys.imageio", name: "imageio-jpeg", version: version_twelvemonkeys
    implementation group: "com.twelvemonkeys.imageio", name: "imageio-tiff", version: version_twelvemonkeys
    implementation group: "com.drewnoakes", name: "metadata-extractor", version: version_metadataextractor
    implementation group: "org.boofcv", name: "boofcv-all", version: version_boofcv
    implementation group: "net.coobird", name: "thumbnailator", version: version_thumbnailator

    /** JOGL and JOML dependencies for 3D model support. */
    implementation "org.joml:joml:${version_joml}"
    implementation "org.jogamp.gluegen:gluegen-rt:${version_jogl}"
    implementation "org.jogamp.jogl:jogl-all:${version_jogl}"
    implementation "org.jogamp.jogl:jogl-all:${version_jogl}:natives-windows-amd64"
    implementation "org.jogamp.jogl:jogl-all:${version_jogl}:natives-windows-i586"
    implementation "org.jogamp.jogl:jogl-all:${version_jogl}:natives-linux-amd64"
    implementation "org.jogamp.jogl:jogl-all:${version_jogl}:natives-linux-armv6"
    implementation "org.jogamp.jogl:jogl-all:${version_jogl}:natives-linux-armv6hf"
    implementation "org.jogamp.jogl:jogl-all:${version_jogl}:natives-linux-i586"
    implementation "org.jogamp.jogl:jogl-all:${version_jogl}:natives-macosx-universal"
    implementation "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-windows-amd64"
    implementation "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-windows-i586"
    implementation "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-linux-amd64"
    implementation "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-linux-armv6"
    implementation "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-linux-armv6hf"
    implementation "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-linux-i586"
    implementation "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-macosx-universal"

    /** JavaCPP. */
    implementation group: "org.bytedeco", name: "javacpp", version: version_javacpp
    implementation group: "org.bytedeco.javacpp-presets", name: "ffmpeg", version: version_ffmpeg

    /** Java 9+ compatibility. */
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
}

shadowJar{
    mergeServiceFiles()
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}
